# Copyright (c) 2012 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""A module providing the summary for multiple test results.

This firmware_summary module is used to collect the test results of
multiple rounds from the logs generated by different firmware versions.
The test results of the various validators of every gesture are displayed.
In addition, the test results of every validator across all gestures are
also summarized.

Usage:
$ python firmware_summary log_directory


A typical summary output looks like

Test Summary (by gesture)            :  fw_2.41   fw_2.42     count
---------------------------------------------------------------------
one_finger_tracking
  CountTrackingIDValidator           :     1.00      0.90        12
  LinearityBothEndsValidator         :     0.97      0.89        12
  LinearityMiddleValidator           :     1.00      1.00        12
  NoGapValidator                     :     0.74      0.24        12
  NoReversedMotionBothEndsValidator  :     0.68      0.34        12
  NoReversedMotionMiddleValidator    :     1.00      1.00        12
  SampleRateValidator                :     1.00      1.00        12
one_finger_to_edge
  CountTrackingIDValidator           :     1.00      1.00         4
  LinearityBothEndsValidator         :     0.88      0.89         4
  LinearityMiddleValidator           :     1.00      1.00         4
  NoGapValidator                     :     0.50      0.00         4
  NoReversedMotionMiddleValidator    :     1.00      1.00         4
  RangeValidator                     :     1.00      1.00         4

  ...


Test Summary (by validator)          :   fw_2.4  fw_2.4.a     count
---------------------------------------------------------------------
  CountPacketsValidator              :     1.00      0.82         6
  CountTrackingIDValidator           :     0.92      0.88        84

  ...

"""


import glob
import json
import os
import sys

from firmware_constants import VLOG


class FirmwareSummary:
    """Summary for touchpad firmware tests."""

    def __init__(self, log_dir='/var/tmp/touchpad_firmware_test'):
        if os.path.isdir(log_dir):
            self.log_dir = log_dir
        else:
            error_msg = 'Error: The test result directory does not exist: %s'
            print error_msg % log_dir
            sys.exit(-1)

        self.logs = self._get_result_logs()
        if not self.logs:
            warn_msg = 'Warning: no log files in the test result directory: %s'
            print warn_msg % log_dir
            sys.exit(-1)

        self._parse_result_summary()
        self._combine_rounds()
        self._combine_gestures()

    def _load_result_log(self, log_filename):
        """Load the json log file into the log dictionary."""
        with open(log_filename) as log_fd:
            log_data = json.load(log_fd)
        return log_data

    def _get_firmware_version(self, filename):
        """Get the firmware version from the given filename."""
        return filename.split('-')[2]

    def _get_result_logs(self):
        """Load the json log files in the log dictionary."""
        patterns = ['*.log', '*/*.log']
        log_filenames = []
        for pattern in patterns:
            log_filenames += glob.glob(os.path.join(self.log_dir, pattern))

        # TODO(josephsih): it is desirable to add a command line option
        # so that the tester could choose to make the summary against different
        # versions or against different file names.
        logs_dict = {}
        for log_filename in log_filenames:
            version = self._get_firmware_version(log_filename)
            if version not in logs_dict:
                logs_dict[version] = []
            logs_dict[version].append(self._load_result_log(log_filename))

        return logs_dict

    def _parse_result_summary(self):
        """Generate a summary of all the loaded logs."""
        self.gestures = []
        self.fws = []
        self.validators = []
        self.g_scores = {}

        for fw in self.logs:
            # Build the firmware list
            if fw not in self.fws:
                self.fws.append(fw)

            # Iterate through every round
            for round_log in self.logs[fw]:
                # Iterate through every gesture_variation of the round
                for gv in round_log[VLOG.GV_LIST]:
                    # Build the gesture list
                    gesture = eval(gv)[0]
                    if gesture not in self.gestures:
                        self.gestures.append(gesture)

                    # Build the g_scores
                    if gesture not in self.g_scores:
                        self.g_scores[gesture] = {}
                    if fw not in self.g_scores[gesture]:
                        self.g_scores[gesture][fw] = {}

                    # Iterate through each validator score pair
                    for validator_score_pair in round_log[VLOG.DICT][gv]:
                        validator = validator_score_pair.keys()[0]
                        if validator not in self.g_scores[gesture][fw]:
                            # Build the validator
                            self.g_scores[gesture][fw][validator] = []

                        # Build the score of the validator
                        score = validator_score_pair[validator]
                        self.g_scores[gesture][fw][validator].append(score)

                        if validator not in self.validators:
                            self.validators.append(validator)

        self.validators.sort()

    def _combine_rounds(self):
        """Combine the test results of multiple rounds of the same
        firmware version.
        """
        self.validator_sum = {}
        self.validator_count = {}
        self.validator_average = {}
        for gesture in self.g_scores:
            for fw in self.fws:
                if fw not in self.validator_sum:
                    self.validator_sum[fw] = {}
                    self.validator_count[fw] = {}
                    self.validator_average[fw] = {}
                for validator in self.g_scores[gesture][fw]:
                    if validator not in self.validator_sum[fw]:
                        self.validator_sum[fw][validator] = {}
                        self.validator_count[fw][validator] = {}
                        self.validator_average[fw][validator] = {}

                    scores = self.g_scores[gesture][fw][validator]
                    for score in scores:
                        format_str = '%d' if isinstance(score, int) else '%.2f'
                        format_str += ','

                    # Keep the sum, count, and average
                    self.validator_sum[fw][validator][gesture] = sum(scores)
                    self.validator_count[fw][validator][gesture] = len(scores)
                    ave = float(self.validator_sum[fw][validator][gesture] /
                                self.validator_count[fw][validator][gesture])
                    self.validator_average[fw][validator][gesture] = ave

    def _combine_gestures(self):
        """Combine the test results of the gestures of the same firmware version
        for every validator.
        """
        self.validator_summary_score = {}
        self.validator_summary_count= {}
        for validator in self.validators:
            self.validator_summary_score[validator] = {}
            self.validator_summary_count[validator] = {}
            for fw in self.fws:
                validator_sum = sum(self.validator_sum[fw][validator].values())
                count = sum(self.validator_count[fw][validator].values())
                # TODO(josephsih): a weighted average is desirable
                average = float(validator_sum) / count
                self.validator_summary_score[validator][fw] = average
                self.validator_summary_count[validator][fw] = count

    def _print_summary_title(self, summary_title_str):
        """Print the summary of the test results by gesture."""
        column_title_format = '{0:<37}: {1:>8}  {2:>8}  {3:>8}'
        title_list = [summary_title_str,] + self.fws + ['count',]
        column_title = column_title_format.format(*title_list)
        print '\n\n', column_title
        print '-' * len(column_title)

    def _print_scores_and_count(self, scores_and_count):
        """Print the scores and the count."""
        scores_count_format = '  {0:<35}: {1:>8.2f}  {2:>8.2f}  {3:>8d}'
        print scores_count_format.format(*tuple(scores_and_count))

    def _print_result_summary_by_gesture(self):
        """Print the summary of the test results by gesture."""
        fw = self.fws[0]
        self._print_summary_title('Test Summary (by gesture)')
        for gesture in self.gestures:
            print gesture
            # for validator in self.validator_sum[fw]:
            validators = self.validator_sum[fw].keys()
            validators.sort()
            for validator in validators:
                scores_and_count = [validator,]
                for fw in self.fws:
                    average = self.validator_average[fw][validator].get(gesture)
                    # Append this validator only if it is used in this gesture.
                    if average is not None:
                        scores_and_count.append(average)
                if average is not None:
                    # Assume the counts of every fw are the same for fairness.
                    count = self.validator_count[fw][validator].get(gesture)
                    scores_and_count.append(count)
                    self._print_scores_and_count(scores_and_count)

    def _print_result_summary_by_validator(self):
        """Print the summary of the test results by validator."""
        fw = self.fws[0]
        self._print_summary_title('Test Summary (by validator)')
        for validator in self.validators:
            scores_and_count = [validator,]
            for fw in self.fws:
                average = self.validator_summary_score[validator][fw]
                scores_and_count.append(average)
            # Assume the counts of every fw are the same for fairness.
            scores_and_count.append(self.validator_summary_count[validator][fw])
            self._print_scores_and_count(scores_and_count)

    def print_result_summary(self):
        """Print the summary of the test results."""
        self._print_result_summary_by_gesture()
        self._print_result_summary_by_validator()


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print 'Usage: python %s log_directory' % sys.argv[0]
        sys.exit(-1)
    log_dir = sys.argv[1]
    summary = FirmwareSummary(log_dir=log_dir)
    summary.print_result_summary()
