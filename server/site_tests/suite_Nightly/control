# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

AUTHOR = "Chrome OS Team"
NAME = "Nightly"
TIME = "LONG"
TEST_CATEGORY = "Functional"
TEST_CLASS = "suite"
TEST_TYPE = "server"

DOC = """
This test suite runs automated tests that should all pass and that, together
with the BuildVerify suite, verify that all major features in the build are
fully functional.  These are meant to run nightly in less than 8 hours.
"""


# List of client tests with parameters
TESTS = [
  ('compilebench', {}),
  ('dbench', {}),
  ('desktopui_WindowManagerFocusNewWindows', {}),
  ('desktopui_WindowManagerHotkeys', {}),
  ('disktest', {}),
  ('firmware_VbootCrypto', {}),
  ('fsx', {}),
  ('graphics_GLAPICheck', {}),
  ('graphics_GLBench', {}),
  ('graphics_O3DSelenium', {}),
  ('graphics_SanAngeles', {}),
  ('hackbench', {}),
  ('hardware_StorageFio', {}),
# TODO: Until ltp can pass on chromiumos
#  ('ltp', {}),
  ('platform_CleanShutdown', {}),
  ('platform_FileNum', {}),
  ('platform_FileSize', {}),
  ('login_CryptohomeMounted', {}),
  ('login_CryptohomeIncognitoMounted', {}),
  ('login_CryptohomeUnmounted', {}),
  ('login_CryptohomeUnmounted', {'creds': '$backdoor',
                                 'is_incognito': True,
                                 'tag': 'incognito'}),
  ('realtimecomm_GTalkAudioBench', {}),
  ('realtimecomm_GTalkunittest', {}),
  ('unixbench', {}),
  # tests that have been promoted to running in Nightly and may find their way
  # into BVT or other suite
  ('desktopui_UrlFetch', {}),
  ('network_UdevRename', {}),
  ('desktopui_SpeechSynthesisSemiAuto', {}),
  ('platform_MiniJailVfsNamespace', {}),
  ('platform_MiniJailPidNamespace', {}),
  ('platform_MiniJailCmdLine', {}),
  ('platform_MiniJailRootCapabilities', {}),
]

# A dict which holds {machine: [(test, argv), (test, argv), ...]}
test_dict = {}

# Assign tests with its argv to machines in a round-robin way.
index = 0
for test_with_argv in TESTS:
  m_index = index % len(machines)
  test_list = test_dict.setdefault(machines[m_index], [])
  test_list.append(test_with_argv)
  index += 1


def run_assigned_tests(machine):
  client = hosts.create_host(machine)
  client_at = autotest.Autotest(client)
  test_list = test_dict[machine]
  for test, argv in test_list:
    client_at.run_test(test, **argv)
  job.run_test("platform_BootPerfServer", host=client, iterations=50)

job.parallel_on_machines(run_assigned_tests, machines)

# Run server-side suites
job.run_control('server/site_tests/suite_SecurityFunctional/control')
