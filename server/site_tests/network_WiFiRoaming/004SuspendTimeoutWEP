# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This test run seeks to place the DUT in suspend-to-RAM for longer
# than the AP will wait for it, to see if/how the DUT notices that
# it's been disassociated.
#
# static key WEP-40
{ "name":"SuspendWEP",
  "steps":[             # Channel [1,6,11]
    [ "create",         { "type":"hostap" } ],

    # Connect the DUT to an AP
    [ "config",         { "channel":"2412", "mode":"11g",
                          "ssid_suffix": 't1',
#                          "authmode":"open", "wepmode":"on",
                          "wepmode":"on",
                          # 10 digits : 0123456789
                          "wep_key0":  "0123456789",
                          "wep_key1":  "89abcdef01",
                          "wep_key2":  "9876543210",
                          "wep_key3":  "fedcba9876",
                          "deftxkey":"1",
                          "ap_max_inactivity" : '10'} ],

    # key index 1, 40-bit WEP
    [ "connect",        { "security":"wep", "psk":"1:89abcdef01" } ],
    [ "client_ping",    { "count":"10" } ],

    # Put the system to sleep for 20 seconds
    [ "client_suspend", { "suspend_time": "20" } ],

    # The AP should have given up on the DUT. If the DUT realizes this
    # (what we're testing), then it can reassociate and this will
    # succeed. If it doesn't realze it, we'll assume we're still
    # associated and the ping will fail.
    [ "client_ping",    { "count":"10" } ],

    # Pull some time differences out of the logs
    [ "log_time_diff",  { "from":"Back to C", "to":"Reason: 7",
                          "perf":"deauth" } ],
    [ "log_time_diff",  { "from":"Reason: 7", "to":": associated",
                          "perf":"reassoc" } ],
    [ "log_time_diff",  { "from":": associated", "to":"COMPLETED",
                          "perf":"reconnect" } ],
    [ "destroy" ],

  ],
}
