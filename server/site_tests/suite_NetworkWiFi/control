# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

AUTHOR = "Chrome OS Team"
TIME = "LONG"
NAME = "NetworkWiFi"
TEST_CATEGORY = "Stress"
TEST_CLASS = "suite"
TEST_TYPE = "server"

DOC = """
This test suite runs automated WiFi enclosure tests that should all pass.

WiFiMatFunc and WiFiSecMat make up a suite of 3-machine tests to validate
basic WiFi functionality. One client, one server, and one programmable WiFi
AP/Router are required (either off-the-shelf with a network-accesible CLI or a
Linux/BSD system with a WiFi card that supports HostAP functionality).

Configuration information to run_test:

server     - the IP address of the server (automatically filled in)
client     - the IP address of the client (automatically filled in)
router     - the IP address of the WiFi AP/Router and the names of the
             wifi and wired devices to configure
"""

import os

from autotest_lib.client.common_lib import error
from autotest_lib.server import site_host_attributes, site_wifitest

def run_server_tests(machine):
  client = hosts.create_host(machine)
  client_attributes = site_host_attributes.HostAttributes(machine)

  test_pat = '[0-9]*'
  router_addr = str(client_attributes.router_addr)
  server_addr = str(client_attributes.server_addr)

  config = site_wifitest.read_wifi_testbed_config(
      os.path.join(job.configdir, 'wifi_testbed_config'),
      client_addr = machine,
      router_addr = router_addr,
      server_addr = server_addr)

  server = config['server']
  router = config['router']

  logging.info("Client %s, Server %s, AP %s" % \
      (machine, server.get('addr', 'N/A'), router['addr']))

  dir = os.path.join(job.serverdir, "site_tests", "network_WiFiSecMat")
  for t in site_wifitest.read_tests(dir, test_pat):
    job.run_test("network_WiFiSecMat", testcase=t, config=config, tag=t['file'])

  dir = os.path.join(job.serverdir, "site_tests", "network_WiFiMatFunc")
  for t in site_wifitest.read_tests(dir, test_pat):
    job.run_test("network_WiFiMatFunc", testcase=t, config=config,
        tag=t['file'])

parallel_simple(run_server_tests, machines)

